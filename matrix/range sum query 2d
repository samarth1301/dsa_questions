//question : https://leetcode.com/problems/range-sum-query-2d-immutable
//optimised solution
class NumMatrix {
public:
    vector<vector<int>> matrix;
     vector<vector<int>> cumulativematrix;//cumulative matrix stoting cumulative sum row-wise
    NumMatrix(vector<vector<int>>& matrix) {
        this->matrix = matrix;
        this->cumulativematrix=matrix;
        //calculating cumulative sum row-wise
        for(int i=0;i<matrix.size();i++){
            int sum=0;
            for(int j=0;j<matrix[0].size();j++){
                sum+=matrix[i][j];
                cumulativematrix[i][j]=sum;
            }
        }
    }
    //O(N) solution when you have cumulative array row-wise already stored
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int sum=0;
        //calculate sum row wise
        for(int i=row1;i<=row2;i++){
          r is the value of element which will be removed from the start to get sum from col1 to col2
          //in case we are at the first column, we dont need to subtract anything
            int r = (col1>0 ? cumulativematrix[i][col1-1] : 0);
            //sum is the value of sum of elements from col1 to col2
           sum+= cumulativematrix[i][col2]-r;
        }
        return sum;
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
