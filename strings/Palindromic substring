class Solution {
public:
    
    void check(int left, int right, int &c, string s){
        //checking both sides from left and right index as long as characters are same
        while(left>=0 && right<s.size() && s[left]==s[right]){
            left--;
            right++;
            c++;
        }
    }
    
    int countSubstrings(string s) {
//         count,
        int c=0,n=s.size();
        //for each character, check twice, once in both direction from the same element
        //and once both sides from the same element and next element
        for(int i=0;i<n;i++){
            check(i,i,c,s);
            check(i,i+1,c,s);
        }
        return c;
    }

};
 //dp solution
    int countSubstrings(string s) {
        int count = 0,n =s.size();
        //a dp matrix
        vector<vector<int>> dp (n+1,vector<int> (n+1,0));

        //each time traverse each col
        for(int col = 0;col<n;col++){
            //traverse diagonally incrementing i and j
            //as long as j  doesnt overshoot the size of the matrix
            for(int i=0,j=col;j<n;i++,j++){
                //if first diagonal, make it 1
                if(col==0){
                  dp[i][j]= 1;
                   
                } 
                //if second diagonal make it 1 only if extreme chars are equal
                else if(col == 1){
                  if(s[i]==s[j]){
                      dp[i][j]=1;
                      
                  }
                } 
                else{
                    //make it 1 only if extreme characters are same and 
                    //the middle part is also an palindrome
                    //which is at [i+1][j-1]
                    if(s[i]==s[j] && dp[i+1][j-1] ){
                        dp[i][j]=1;
                    }
                }
                //if palindrome increment count
                     if(dp[i][j]) count++;      

            }
        }
        return count;
    }

